(()=>{"use strict";var e={141:()=>{var e=function(e){var r=new Map,n=[],t=[];t.unshift({id:1,name:"部门A",children:[{id:2,name:"部门B",children:[{id:4,name:"部门D"},{id:5,name:"部门E"}]},{id:3,name:"部门C",children:[{id:6,name:"部门F"}]}]});for(var a=function(){var e=t.pop();if(null==e)return"break";var a=e.id,i=e.name,o=e.children,d=void 0===o?[]:o,u=r.get(e),l={id:a,name:i,parentId:(null==u?void 0:u.id)||0};n.push(l),d.forEach((function(n){r.set(n,e),t.unshift(n)}))};t.length>0&&"break"!==a(););return n}();console.info(e)}},r={};function n(t){var a=r[t];if(void 0!==a)return a.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n(141)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLjVmOTFhNTRkLmpzIiwibWFwcGluZ3MiOiJtQ0FtREEsSUFxQk1BLEVBdkROLFNBQWtCQyxHQUVkLElBQU1DLEVBQTBDLElBQUlDLElBRTlDQyxFQUFvQixHQUdwQkMsRUFBcUIsR0FDM0JBLEVBQU1DLFFBMEJFLENBQ1JDLEdBQUksRUFDSkMsS0FBTSxNQUNOQyxTQUFVLENBQ04sQ0FDSUYsR0FBSSxFQUNKQyxLQUFNLE1BQ05DLFNBQVUsQ0FDTixDQUFFRixHQUFJLEVBQUdDLEtBQU0sT0FDZixDQUFFRCxHQUFJLEVBQUdDLEtBQU0sU0FHdkIsQ0FDSUQsR0FBSSxFQUNKQyxLQUFNLE1BQ05DLFNBQVUsQ0FDTixDQUFFRixHQUFJLEVBQUdDLEtBQU0sWUF4QzNCLEksaUJBQ0ksSUFBTUUsRUFBVUwsRUFBTU0sTUFDdEIsR0FBZSxNQUFYRCxFLGNBRUksSUFBQUgsRUFBNEJHLEVBQU8sR0FBL0IsRUFBd0JBLEVBQU8sS0FBekIsRUFBa0JBLEVBQU8sU0FBekJELE9BQVEsSUFBRyxLQUFFLEVBR3pCRyxFQUFhVixFQUFhVyxJQUFJSCxHQUU5QkksRUFBTyxDQUFFUCxHQUFFLEVBQUVDLEtBQUksRUFBRU8sVUFEUkgsTUFBQUEsT0FBVSxFQUFWQSxFQUFZTCxLQUFNLEdBRW5DSCxFQUFJWSxLQUFLRixHQUdUTCxFQUFTUSxTQUFRLFNBQUFDLEdBRWJoQixFQUFhaUIsSUFBSUQsRUFBT1IsR0FFeEJMLEVBQU1DLFFBQVFZLE9BakJmYixFQUFNZSxPQUFTLEcsZ0JBcUJ0QixPQUFPaEIsRUF3QkVpQixHQUNiQyxRQUFRQyxLQUFLdkIsS0N4RVR3QixFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxJQU9WLE9BSEFFLEVBQW9CTCxHQUFVSSxFQUFRQSxFQUFPRCxRQUFTSixHQUcvQ0ssRUFBT0QsUUNwQmZKLEVBQW9CTyxFQUFLRixJQUN4QixJQUFJRyxFQUFTSCxHQUFVQSxFQUFPSSxXQUM3QixJQUFPSixFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQUwsRUFBb0JVLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLEdDTFJSLEVBQW9CVSxFQUFJLENBQUNOLEVBQVNRLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFosRUFBb0JjLEVBQUVGLEVBQVlDLEtBQVNiLEVBQW9CYyxFQUFFVixFQUFTUyxJQUM1RUUsT0FBT0MsZUFBZVosRUFBU1MsRUFBSyxDQUFFSSxZQUFZLEVBQU03QixJQUFLd0IsRUFBV0MsTUNKM0ViLEVBQW9CYyxFQUFJLENBQUNJLEVBQUtDLElBQVVKLE9BQU9LLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlcnZpZXctanMtY29kZS8uL3NyYy8wNC1hbmFseXNpcy90cmVlLXRvLWFyci50cyIsIndlYnBhY2s6Ly9pbnRlcnZpZXctanMtY29kZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9pbnRlcnZpZXctanMtY29kZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9pbnRlcnZpZXctanMtY29kZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3LWpzLWNvZGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXNjcmlwdGlvbiB0cmVlIHRvIGFyclxuICogQGF1dGhvciDlj4zotorogIHluIhcbiAqL1xuXG5pbnRlcmZhY2UgSUFycmF5SXRlbSB7XG4gICAgaWQ6IG51bWJlclxuICAgIG5hbWU6IHN0cmluZ1xuICAgIHBhcmVudElkOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIElUcmVlTm9kZSB7XG4gICAgaWQ6IG51bWJlclxuICAgIG5hbWU6IHN0cmluZ1xuICAgIGNoaWxkcmVuPzogSVRyZWVOb2RlW11cbn1cblxuZnVuY3Rpb24gY29udmVydDEocm9vdDogSVRyZWVOb2RlKTogSUFycmF5SXRlbVtdIHtcbiAgICAvLyBNYXBcbiAgICBjb25zdCBub2RlVG9QYXJlbnQ6IE1hcDxJVHJlZU5vZGUsIElUcmVlTm9kZT4gPSBuZXcgTWFwKClcblxuICAgIGNvbnN0IGFycjogSUFycmF5SXRlbVtdID0gW11cblxuICAgIC8vIOW5v+W6puS8mOWFiOmBjeWOhu+8jHF1ZXVlXG4gICAgY29uc3QgcXVldWU6IElUcmVlTm9kZVtdID0gW11cbiAgICBxdWV1ZS51bnNoaWZ0KHJvb3QpIC8vIOagueiKgueCuSDlhaXpmJ9cblxuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGN1ck5vZGUgPSBxdWV1ZS5wb3AoKSAvLyDlh7rpmJ9cbiAgICAgICAgaWYgKGN1ck5vZGUgPT0gbnVsbCkgYnJlYWtcblxuICAgICAgICBjb25zdCB7IGlkLCBuYW1lLCBjaGlsZHJlbiA9IFtdIH0gPSBjdXJOb2RlXG5cbiAgICAgICAgLy8g5Yib5bu65pWw57uEIGl0ZW0g5bm2IHB1c2hcbiAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IG5vZGVUb1BhcmVudC5nZXQoY3VyTm9kZSlcbiAgICAgICAgY29uc3QgcGFyZW50SWQgPSBwYXJlbnROb2RlPy5pZCB8fCAwXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB7IGlkLCBuYW1lLCBwYXJlbnRJZCB9XG4gICAgICAgIGFyci5wdXNoKGl0ZW0pXG5cbiAgICAgICAgLy8g5a2Q6IqC54K55YWl6ZifXG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgLy8g5pig5bCEIHBhcmVudFxuICAgICAgICAgICAgbm9kZVRvUGFyZW50LnNldChjaGlsZCwgY3VyTm9kZSlcbiAgICAgICAgICAgIC8vIOWFpemYn1xuICAgICAgICAgICAgcXVldWUudW5zaGlmdChjaGlsZClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyXG59XG5cbmNvbnN0IG9iaiA9IHtcbiAgICBpZDogMSxcbiAgICBuYW1lOiAn6YOo6ZeoQScsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDIsXG4gICAgICAgICAgICBuYW1lOiAn6YOo6ZeoQicsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgIHsgaWQ6IDQsIG5hbWU6ICfpg6jpl6hEJyB9LFxuICAgICAgICAgICAgICAgIHsgaWQ6IDUsIG5hbWU6ICfpg6jpl6hFJyB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgbmFtZTogJ+mDqOmXqEMnLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICB7IGlkOiA2LCBuYW1lOiAn6YOo6ZeoRicgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgXVxufVxuY29uc3QgYXJyMSA9IGNvbnZlcnQxKG9iailcbmNvbnNvbGUuaW5mbyhhcnIxKVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSJdLCJuYW1lcyI6WyJhcnIxIiwicm9vdCIsIm5vZGVUb1BhcmVudCIsIk1hcCIsImFyciIsInF1ZXVlIiwidW5zaGlmdCIsImlkIiwibmFtZSIsImNoaWxkcmVuIiwiY3VyTm9kZSIsInBvcCIsInBhcmVudE5vZGUiLCJnZXQiLCJpdGVtIiwicGFyZW50SWQiLCJwdXNoIiwiZm9yRWFjaCIsImNoaWxkIiwic2V0IiwibGVuZ3RoIiwiY29udmVydDEiLCJjb25zb2xlIiwiaW5mbyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=